service: auth-service

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.10
  region: "eu-north-1"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - dynamodb:QueryItem
      Resource: 
        - ${self:custom.UsersTable.Arn}
        - !Join ['/', ['${self:custom.UsersTable.Arn}', 'index', 'emailIndex']]

    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: 
        - ${self:custom.StoresTable.Arn}
        - !Join ['/', ['${self:custom.StoresTable.Arn}', 'index', 'userId']]

    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: 
        - ${self:custom.ProductsTable.Arn}
        - !Join ['/', ['${self:custom.ProductsTable.Arn}', 'index', 'storeId']]


functions:
  auth:
    handler: src/handlers/auth.handler
    cors: true


  signup:
    handler: src/handlers/signup.handler
    events:
      - http:
          path: /signup
          method: post
          cors: true

  login:
    handler: src/handlers/login.handler
    events:
      - http:
          path: /login
          method: post
          cors: true

  delete_user:
    handler: src/handlers/delete_user.handler
    events:
      - http:
          path: /user/{id}/delete
          method: delete
          cors: true
          authorizer: auth

  create_store:
    handler: src/handlers/create_store.handler
    events:
      - http:
          path: /store
          method: post
          cors: true
          authorizer: auth

  delete_store:
    handler: src/handlers/delete_store.handler
    events:
      - http:
          path: /store/{id}/delete
          method: delete
          cors: true
          authorizer: auth

  create_product:
    handler: src/handlers/create_product.handler
    events:
      - http:
          path: /product
          method: post
          cors: true
          authorizer: auth

  # delete_product:
  #   handler: src/handlers/delete_product.handler
  #   events:
  #     - http:
  #         path: /store/{id}/product/remove
  #         method: delete
  #         cors: true
  #         authorizer: auth

  get_product:
    handler: src/handlers/get_product.handler
    events:
      - http:
          path: /product/{id}
          method: get
          cors: true
          authorizer: auth

  get_products:
    handler: src/handlers/get_products.handler
    events:
      - http:
          path: /store/{id}/products
          method: get
          cors: true
          authorizer: auth

  get_stores_owned_by_user:
    handler: src/handlers/get_stores_owned_by_user.handler
    events:
      - http:
          path: /user/{id}/stores
          method: get
          cors: true
          authorizer: auth

  get_store:
    handler: src/handlers/get_store.handler
    events:
      - http:
          path: /store/{id}/
          method: get
          authorizer: auth
          cors: true

  # for later
  # rate_owner:
  #   handler: src/handlers/rate_owner.handler
  #   events:
  #     - http:
  #         path: /rate/user/{id}
  #         method: post
  #         authorizer: auth
  #         cors: true



plugins:
  - serverless-python-requirements


resources:
  Resources:
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
          
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UsersTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S

          - AttributeName: email
            AttributeType: S

        KeySchema:
          - AttributeName: id
            KeyType: HASH

        GlobalSecondaryIndexes:
          - IndexName: emailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL


    StoresTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: StoresTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

        GlobalSecondaryIndexes:
          - IndexName: userId
            KeySchema:
              - AttributeName: user_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ProductsTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S

          - AttributeName: store_id
            AttributeType: S

        KeySchema:
          - AttributeName: id
            KeyType: HASH

        GlobalSecondaryIndexes:
          - IndexName: storeId
            KeySchema:
              - AttributeName: store_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL


custom:
  UsersTable:
    Arn: !GetAtt UsersTable.Arn
  StoresTable:
    Arn: !GetAtt StoresTable.Arn
  ProductsTable:
    Arn: !GetAtt ProductsTable.Arn
