service: auth-service

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.10
  region: "eu-north-1"
  iamRoleStatements:
    - ${file(resources/UsersTable.yml):UsersTableIAM}
    - ${file(resources/RolesTable.yml):RolesTableIAM}
    - ${file(resources/PermissionsTable.yml):PermissionsTableIAM}
    - ${file(resources/PoliciesTable.yml):PoliciesTableIAM}
    - ${file(resources/PolicyAssignmentsTable.yml):PolicyAssignmentsTableIAM}
    - ${file(resources/RolesPermissionsTable.yml):RolesPermissionsTableIAM}
    - ${file(resources/UsersRolesTable.yml):UsersRolesTableIAM}
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        - ${self:custom.MyBucket.Arn}

  environment:
    UsersTableName: ${self:custom.UsersTable.Name}
    RolesTableName: ${self:custom.RolesTable.Name}
    PermissionsTableName: ${self:custom.PermissionsTable.Name}
    PoliciesTableName: ${self:custom.PoliciesTable.Name}
    PolicyAssignmentsTableName: ${self:custom.PolicyAssignmentsTable.Name}
    RolesPermissionsTableName: ${self:custom.RolesPermissionsTable.Name}
    UsersRolesTableName: ${self:custom.UsersRolesTable.Name}
    MyBucketName: ${self:custom.MyBucket.Name}

functions:
  auth:
    handler: src/handlers/auth.handler
    cors: true


  signup:
    handler: src/handlers/signup.handler
    events:
      - http:
          path: /signup
          method: post
          cors: true

  login:
    handler: src/handlers/login.handler
    events:
      - http:
          path: /login
          method: post
          cors: true

  delete_user:
    handler: src/handlers/delete_user.handler
    events:
      - http:
          path: /user/{id}/delete
          method: delete
          cors: true
          authorizer: auth


plugins:
  - serverless-python-requirements
  - serverless-api-gateway-caching


resources:
  Resources:
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
          
    UsersTable: ${file(resources/UsersTable.yml):UsersTable}
    RolesTable: ${file(resources/RolesTable.yml):RolesTable}
    PermissionsTable: ${file(resources/PermissionsTable.yml):PermissionsTable}
    PoliciesTable: ${file(resources/PoliciesTable.yml):PoliciesTable}
    PolicyAssignmentsTable: ${file(resources/PolicyAssignmentsTable.yml):PolicyAssignmentsTable}
    RolesPermissionsTable: ${file(resources/RolesPermissionsTable.yml):RolesPermissionsTable}
    UsersRolesTable: ${file(resources/UsersRolesTable.yml):UsersRolesTable}

    MyBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: MyBucket-ea077d56-dcb6-4ae8-b702-38b616cd102f

custom:
  UsersTable:
    Arn: !GetAtt UsersTable.Arn
    Name: !Ref UsersTable
  RolesTable:
    Arn: !GetAtt RolesTable.Arn
    Name: !Ref RolesTable
  PermissionsTable:
    Arn: !GetAtt PermissionsTable.Arn
    Name: !Ref PermissionsTable
  PoliciesTable:
    Arn: !GetAtt PoliciesTable.Arn
    Name: !Ref PoliciesTable
  PolicyAssignmentsTable:
    Arn: !GetAtt PolicyAssignmentsTable.Arn
    Name: !Ref PolicyAssignmentsTable
  RolesPermissionsTable:
    Arn: !GetAtt RolesPermissionsTable.Arn
    Name: !Ref RolesPermissionsTable
  UsersRolesTable:
    Arn: !GetAtt UsersRolesTable.Arn
    Name: !Ref UsersRolesTable
  MyBucket:
    Arn: !GetAtt MyBucket.Arn
    Name: !Ref MyBucket
  apiGatewayCaching:
    enabled: false
